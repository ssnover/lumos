// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `lumos_msgs/ButtonEvent.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct ButtonEvent {
    // message fields
    pub button_id: i32,
    pub event: EventType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ButtonEvent {
    fn default() -> &'a ButtonEvent {
        <ButtonEvent as ::protobuf::Message>::default_instance()
    }
}

impl ButtonEvent {
    pub fn new() -> ButtonEvent {
        ::std::default::Default::default()
    }

    // int32 button_id = 1;


    pub fn get_button_id(&self) -> i32 {
        self.button_id
    }
    pub fn clear_button_id(&mut self) {
        self.button_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_button_id(&mut self, v: i32) {
        self.button_id = v;
    }

    // .lumos_msgs.EventType event = 2;


    pub fn get_event(&self) -> EventType {
        self.event
    }
    pub fn clear_event(&mut self) {
        self.event = EventType::EVENT_BUTTON_PRESS;
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: EventType) {
        self.event = v;
    }
}

impl ::protobuf::Message for ButtonEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.button_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.button_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.button_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event != EventType::EVENT_BUTTON_PRESS {
            my_size += ::protobuf::rt::enum_size(2, self.event);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.button_id != 0 {
            os.write_int32(1, self.button_id)?;
        }
        if self.event != EventType::EVENT_BUTTON_PRESS {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.event))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ButtonEvent {
        ButtonEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "button_id",
                |m: &ButtonEvent| { &m.button_id },
                |m: &mut ButtonEvent| { &mut m.button_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EventType>>(
                "event",
                |m: &ButtonEvent| { &m.event },
                |m: &mut ButtonEvent| { &mut m.event },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ButtonEvent>(
                "ButtonEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ButtonEvent {
        static instance: ::protobuf::rt::LazyV2<ButtonEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ButtonEvent::new)
    }
}

impl ::protobuf::Clear for ButtonEvent {
    fn clear(&mut self) {
        self.button_id = 0;
        self.event = EventType::EVENT_BUTTON_PRESS;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ButtonEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ButtonEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    EVENT_BUTTON_PRESS = 0,
    EVENT_BUTTON_RELEASE = 1,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::EVENT_BUTTON_PRESS),
            1 => ::std::option::Option::Some(EventType::EVENT_BUTTON_RELEASE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::EVENT_BUTTON_PRESS,
            EventType::EVENT_BUTTON_RELEASE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EventType>("EventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::EVENT_BUTTON_PRESS
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1clumos_msgs/ButtonEvent.proto\x12\nlumos_msgs\"W\n\x0bButtonEvent\
    \x12\x1b\n\tbutton_id\x18\x01\x20\x01(\x05R\x08buttonId\x12+\n\x05event\
    \x18\x02\x20\x01(\x0e2\x15.lumos_msgs.EventTypeR\x05event*=\n\tEventType\
    \x12\x16\n\x12EVENT_BUTTON_PRESS\x10\0\x12\x18\n\x14EVENT_BUTTON_RELEASE\
    \x10\x01J\x8c\x02\n\x06\x12\x04\0\0\x0c\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0\x13\n\n\n\x02\x05\0\x12\x04\x04\0\x07\
    \x01\n\n\n\x03\x05\0\x01\x12\x03\x04\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\
    \x03\x05\x04\x1b\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x05\x04\x16\n\x0c\n\
    \x05\x05\0\x02\0\x02\x12\x03\x05\x19\x1a\n\x0b\n\x04\x05\0\x02\x01\x12\
    \x03\x06\x04\x1d\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x06\x04\x18\n\x0c\
    \n\x05\x05\0\x02\x01\x02\x12\x03\x06\x1b\x1c\n\n\n\x02\x04\0\x12\x04\t\0\
    \x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x13\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\n\x04\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\x04\t\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\n\n\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \n\x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0b\x04\x18\n\x0c\n\x05\x04\
    \0\x02\x01\x06\x12\x03\x0b\x04\r\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x0b\x0e\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x16\x17b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
